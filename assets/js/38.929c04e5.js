(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{378:function(n,s,t){"use strict";t.r(s);var a=t(0),e=Object(a.a)({},(function(){var n=this,s=n._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("p",[n._v("给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("示例 1:\n输入: 123\n输出: 321\n\n示例 2:\n输入: -123\n输出: -321\n\n示例 3:\n输入: 120\n输出: 21\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br")])]),s("p",[s("em",[s("strong",[n._v("注意:")])]),n._v("\n假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−231,  231 − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。")]),n._v(" "),s("p",[n._v("题目链接："),s("a",{attrs:{href:"https://leetcode-cn.com/problems/reverse-integer",target:"_blank",rel:"noopener noreferrer"}},[n._v("点击这里~"),s("OutboundLink")],1)]),n._v(" "),s("h2",{attrs:{id:"思路"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#思路"}},[n._v("#")]),n._v(" 思路")]),n._v(" "),s("p",[n._v("循环求得每位数值并乘以反转后的指数即可, 注意数据范围溢出。")]),n._v(" "),s("div",{staticClass:"language-golang line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("func reverse(x int) int {\n\tvar res int\n\tfor {\n\t\tif x == 0 {\n\t\t\tbreak\n\t\t}\n\t\tres = res*10 + x%10\n\t\tx /= 10\n\t}\n\t// 根据补码 最大值为除首位全是1 先取全1后右移首位为0  需转换为int类型 否则后续计算数值时不检验首位\n\tconst INT32_MAX = int(^uint32(0) >> 1)\n\t// 除首位外全是0 取最大值反码即可\n\tconst INT32_MIN = ^INT32_MAX\n\tprintln(INT32_MAX)\n\tprintln(INT32_MIN)\n\tif res < INT32_MIN || res > INT32_MAX {\n\t\treturn 0\n\t}\n\treturn res\n}\n\nfunc Test_reverseNumber(t *testing.T) {\n\tprintln(reverse(123))\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br")])])])}),[],!1,null,null,null);s.default=e.exports}}]);